from sklearn.neighbors import BallTree
from tqdm import tqdm
import numpy as np
import pandas as pd
from sklearn.neighbors import BallTree
from tqdm.auto import tqdm
from pathlib import Path
from minerva_analysis import data_path

"""CreateGraph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1XAw2U6iVxYieqM9Qk6YPO8aRYJHza9
"""
raw_data = pd.read_csv(data_path / "Ton/tonsil_with_phenotype.csv")

data = raw_data[['X_centroid', 'Y_centroid', 'phenotype']].copy()
np.save('raw_data', data.to_numpy())

raw_data['id'] = raw_data.index

phenotypes_dict = {val: idx for idx, val in enumerate(raw_data.phenotype.unique())}
phenotypes = phenotypes_dict

pd_phenotypes = {val: idx for idx, val in enumerate(raw_data.phenotype.unique())}

phenotypes_array = pd.DataFrame({'phenotype': raw_data['phenotype']})

phenotypes_array = phenotypes_array.apply(lambda x: x).to_numpy()
for i in tqdm(range(phenotypes_array.shape[0])):
    phenotypes_array[i, 0] = phenotypes_dict[phenotypes_array[i, 0]]

points = pd.DataFrame({'x': raw_data['X_centroid'], 'y': raw_data['Y_centroid']}).to_numpy()
ball_tree = BallTree(points, metric='euclidean')

neighbors, distances = ball_tree.query_radius(points, r=46.15, return_distance=True)

complex_np = np.zeros((phenotypes_array.shape[0], len(phenotypes) * 2))

points = pd.DataFrame({'x': raw_data['X_centroid'], 'y': raw_data['Y_centroid']}).to_numpy()
ball_tree = BallTree(points, metric='euclidean')

complex_np = np.zeros((phenotypes_array.shape[0], len(phenotypes) * 2))
for i in tqdm(range(len(neighbors))):
    dist = distances[i]
    distances[i] = 1 - (dist) / 46.15
    rows = neighbors[i]
    phenos = phenotypes_array[rows].flatten()
    pheno_indices = (phenos * 2).tolist()
    pheno_weight_indices = (phenos * 2 + 1).tolist()
    result = np.zeros((len(phenotypes) * 2))
    counts = np.bincount(pheno_indices)
    result[0:counts.shape[0]] = counts
    # temp = populate_weights(pheno_weight_indices, distances[i], len(phenotypes)*2 )
    for ind in range(len(pheno_weight_indices)):
        result[pheno_weight_indices[ind]] += distances[i][ind]
    complex_np[i, :] = result

small = np.load(data_path / "Ton" / "complex_small.npy")
np.save(data_path / "Ton" / "new_complex_small.npy", complex_np)
